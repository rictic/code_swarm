#!/usr/bin/env python

# Copyright (C) 2008 Michael Dippery <mpd@cs.wm.edu>, et al
#
# This file is part of code_swarm.
#
# code_swarm is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_swarm is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_swarm. If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import tempfile
import md5
from random import random
from threading import Thread
from shutil import copy

def parse_args():
    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option("-r"
                     ,"--reload"
                     ,help="Regenerate the XML log file to get the latest \
                            commits"
                     ,action="store_true")
    parser.add_option("-d"
                     ,"--debug"
                     ,help="Enable Java debugging"
                     ,action="store_true")
    parser.add_option("-c"
                     ,"--config"
                     ,help="Just run code_swarm on the given config file")
    parser.add_option("-p"
                     ,"--profile"
                     ,action="store_true"
                     ,help="Invokes java with profiling options, writing \
                            output to swarm.proof")
    parser.add_option("-f"
                      ,"--freebase"
                      ,help="Visualize a given freebase domain")
    return parser.parse_args()


def main():
    """
    Visualizes the project in the current working directory.

    Doing this automagically involves three steps:
    1) Discovering what kind of repository is used in the current working
        directory.

    2) Converting the log formats from each kind of repository to the event
        xml format that code_swarm expects.

    3) Invoking code_swarm
    """

    options = parse_args()[0]

    if options.config:
        proj_cfg = os.path.abspath(options.config)
    elif options.freebase:
        proj_cfg = do_freebase(options.freebase)
    else:
        proj_cfg = autogenerate_files(options)


    code_swarm_jar = os.path.join(root_path(), "dist", "code_swarm.jar")

    if not os.path.exists(code_swarm_jar):
        print >>sys.stderr, "no code_swarm binaries!"
        print >>sys.stderr, "need to build with 'ant' and 'javac' (java-sdk)"
        print >>sys.stderr, ""
        print >>sys.stderr, "auto-trying the ant command..."
        build = os.path.join(root_path(), "build.xml")
        retn = os.system("ant -buildfile " + build)
        print >>sys.stderr, ""
        if not retn == 0:
            print >>sys.stderr, "ERROR, please verify that Apache Ant is \
                                 installed"
            sys.exit(2)

    invoke_code_swarm(code_swarm_jar, proj_cfg, options)


def root_path():
    "Returns the path of the code_swarm source directory"
    real_path = os.path.join(os.path.dirname(__file__), os.readlink(__file__))
    return os.path.dirname(real_path)


def invoke_code_swarm(code_swarm_jar, proj_cfg, options):
    """Invokes the code_swarm_jar on the given config file"""
    def get_jars():
        """Returns the absolute path of each jar in the code_swarm
        lib directory as a pathsep seperated string"""
        lib_dir = os.path.join(root_path(), "lib")
        jars = [f for f in os.listdir(lib_dir) if f.endswith(".jar")]
        jars = [lib_dir + os.sep + j for j in jars]
        return os.pathsep.join(jars)

    def ld_path_arg():
        (platform, _, _, _, arch) = os.uname()
        if platform == "Linux":
            ld_lib_path = "LD_LIBRARY_PATH"
        elif platform == "Darwin":
            ld_lib_path = "DYLD_LIBRARY_PATH"
        else:
            return ""

        old_path = os.environ.get(ld_lib_path, "")
        path = os.path.join(root_path(), "lib")

        if platform == "Linux" and arch == "x86_64":
            path_64 = os.path.join(path, "linux-x86_64")
            path = os.pathsep.join([path_64, path])
        return "-Djava.library.path=" + os.pathsep.join([path, old_path])

    classpath = os.pathsep.join([code_swarm_jar, get_jars(), "."])
    ea = "-da"
    if options.debug: ea = "-ea"
    java_args = ["-classpath"
                ,classpath
                ,ld_path_arg()
                ,ea
                , "-Xmx1000m"
                , "-server"]
    if options.profile:
        java_args.append("-agentlib:hprof=cpu=samples,depth=7,file=swarm.proof")
    args = [ "java" ] + java_args + ["code_swarm", proj_cfg]
    os.chdir(root_path())
    os.execvp("java", args)


def code_swarm_dir(repo):
    """Returns a directory within the current working directory that
    we can use for storage within the given repository directory."""
    return os.path.join(os.getcwd(), repo, ".code_swarm")


def autogenerate_files(options):
    """docstring for autogenerate_files"""
    if os.path.exists(".git"):
        dir = code_swarm_dir("")
        generate_log = do_git
    elif os.path.exists(".svn"):
        dir = code_swarm_dir(".svn")
        generate_log = do_svn
    elif os.path.exists(".hg"):
        dir = code_swarm_dir(".hg")
        generate_log = do_hg
    elif os.path.exists("_darcs"):
        dir = code_swarm_dir("_darcs")
        generate_log = do_darcs
    else:
        msg  = "This directory isn't an svn, git, hg, or darcs project. "
        msg += "Run in the base directory of a source-controlled project."
        print >>sys.stderr, msg
        sys.exit(2)

    if not os.path.exists(dir):
        os.makedirs(dir)

    if options.reload or not os.path.exists(os.path.join(dir, "log.xml")):
        generate_log(dir)

    proj_cfg = os.path.join(dir, "project.config")
    if not os.path.exists(proj_cfg):
        print >>sys.stderr, "Creating default config file at " + proj_cfg
        cp_tpl = os.path.join(root_path(), "bin", "config.template")
        copy(cp_tpl, proj_cfg)

    return proj_cfg


def do_cmds(*cmds):
    for cmd in cmds:
        if not os.system(cmd) == 0:
            raise Exception("Error running `%s'" % cmd)


def do_git(dir):
    ds = '-' * 72
    fmt = "%%n%s%%nr%%h | %%ae | %%ai (%%aD) | x lines%%nChanged paths: " % ds
    tmp = os.path.join(dir, "temp.log")
    xml = os.path.join(dir, "log.xml")

    return do_cmds('git log --name-status --pretty=format:"%s" > "%s"'%(fmt, tmp)
                  ,"convert_logs.py -g '%s' -o '%s'" % (tmp, xml)
                  ,"rm -f '%s'" % tmp)


def do_svn(dir):
    tmp = os.path.join(dir, "temp.log")
    xml = os.path.join(dir, "log.xml")

    return do_cmds("svn log -v > '%s'" % tmp
                  ,"convert_logs.py -s '%s' -o '%s'" % (tmp, xml)
                  ,"rm -f '%s'" % tmp)


def do_hg(dir):
    tmp = os.path.join(dir, "unsorted_log.xml")
    xml = os.path.join(dir, "log.xml")

    return do_cmds("hg_log.py -o '%s' ." % tmp
                  ,"sort_code_swarm_input.py < '%s' > '%s'" % (tmp, xml)
                  ,"rm '%s'" % tmp)

def do_darcs(dir):
    tmp = os.path.join(dir, "darcs.xml")
    xml = os.path.join(dir, "log.xml")

    return do_cmds("darcs changes -s --xml-output > '%s'" % tmp
                  ,"convert_logs.py -d '%s' -o '%s'" % (tmp, xml)
                  ,"rm -f '%s'" % tmp)

def do_freebase(domain):
    dir = os.path.abspath(tempfile.gettempdir())
    xml = os.path.join(dir, md5.new(str(random())).hexdigest() + ".xml")
    cfg = os.path.join(dir, md5.new(str(random())).hexdigest() + ".config")
    try: os.remove(xml)
    except: pass
    os.mkfifo(xml)
    os.system("fetch_freebase_edits %s > %s &" % (domain,xml))
    copy(os.path.join(root_path(),"bin","freebase_config.template"),cfg)
    cfgf = open(cfg,"a")
    cfgf.write("InputFile=%s\n" % xml)
    cfgf.close()
    return cfg


if __name__ == "__main__":
    main()
